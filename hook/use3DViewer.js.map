{"version":3,"file":"use3DViewer.js","sourceRoot":"","sources":["../src/hook/use3DViewer.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,KAAK,MAAM,OAAO,CAAA;AAC9B,OAAO,EAAE,aAAa,EAAE,MAAM,OAAO,CAAA;AACrC,OAAO,EAAE,aAAa,EAAE,MAAM,8CAA8C,CAAA;AAE5E,+CAA+C;AAC/C,4CAA4C;AAE5C,OAAO,EAAE,cAAc,EAAE,SAAS,EAAE,WAAW,EAAE,MAAM,aAAa,CAAA;AAEpE,MAAM,MAAM,GAAG,MAAM,CAAC,UAAU,CAAA,CAAC,QAAQ;AACzC,MAAM,OAAO,GAAG,MAAM,CAAC,WAAW,CAAA,CAAC,QAAQ;AAC3C,MAAM,aAAa,GAAG,MAAM,GAAG,OAAO,CAAA;AAEtC,IAAI,MAA+B,EACjC,KAAkB,EAClB,QAAuB,EACvB,WAAW,GAAG,EAAE,EAChB,QAA6B,CAAA;AAE/B,MAAM,eAAe,GAAG,CACtB,OAAsB,EACtB,WAA0B,EAC1B,EAAE;IACF,MAAM,UAAU,GAAG;QACjB,mBAAmB;QACnB,YAAY,EAAE,CAAC;QACf,OAAO,EAAE,CAAC;QACV,SAAS,EAAE,GAAG;QACd,SAAS,EAAE,CAAC;QACZ,GAAG,EAAE,GAAG;QACR,mBAAmB;QACnB,iBAAiB,EAAE,CAAC;QACpB,2BAA2B;QAC3B,aAAa,EAAE,IAAI,KAAK,CAAC,KAAK,CAAC,QAAQ,CAAC;QACxC,eAAe,EAAE,CAAC;QAClB,qBAAqB;KACtB,CAAA;IACD,MAAM,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC,CAAA;IACzC,MAAM,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC,CAAA;IACzC,MAAM,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC,CAAA;IACzC,MAAM,WAAW,GAAG,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,GAAG,CAAA;IAE3C,OAAO,IAAI,KAAK,CAAC,oBAAoB,CAAC;QACpC,sBAAsB;QACtB,uCAAuC;QACvC,gDAAgD;QAChD,yBAAyB;QACzB,GAAG,CAAC,OAAO,YAAY,aAAa,IAAI;YACtC,KAAK,EAAE,WAAW;YAClB,QAAQ,EAAE,OAAO;SAClB,CAAC;QACF,GAAG,CAAC,OAAO,YAAY,KAAK,CAAC,OAAO,IAAI,EAAE,GAAG,EAAE,OAAO,EAAE,CAAC;QACzD,SAAS,EAAE,UAAU,CAAC,SAAS;QAC/B,SAAS,EAAE,UAAU,CAAC,SAAS;QAC/B,GAAG,EAAE,UAAU,CAAC,GAAG;QACnB,MAAM,EAAE,WAAW;QACnB,eAAe,EAAE,UAAU,CAAC,eAAe;QAC3C,YAAY,EAAE,UAAU,CAAC,YAAY;QACrC,iBAAiB,EAAE,UAAU,CAAC,iBAAiB;QAC/C,aAAa,EAAE,UAAU,CAAC,aAAa;QACvC,OAAO,EAAE,UAAU,CAAC,OAAO;QAC3B,IAAI,EAAE,KAAK,CAAC,UAAU;QACtB,WAAW,EAAE,IAAI;KAClB,CAAC,CAAA;AACJ,CAAC,CAAA;AAED,MAAM,eAAe,GAAG,GAAG,EAAE;IAC3B,mDAAmD;IACnD,MAAM,KAAK,GAAG,MAAM,CAAC,UAAU,CAAA,CAAC,QAAQ;IACxC,MAAM,MAAM,GAAG,MAAM,CAAC,WAAW,CAAA,CAAC,QAAQ;IAE1C,MAAM,CAAC,MAAM,GAAG,KAAK,GAAG,MAAM,CAAA;IAC9B,MAAM,CAAC,sBAAsB,EAAE,CAAA;IAE/B,QAAQ,CAAC,OAAO,CAAC,KAAK,EAAE,MAAM,CAAC,CAAA;AACjC,CAAC,CAAA;AAED,MAAM,eAAe,GAAG,CACtB,GAAmB,EACnB,MAAoB,EACpB,QAAuB,EACvB,EAAE;IACF,4DAA4D;IAC5D,MAAM,WAAW,GAAG,IAAI,KAAK,CAAC,IAAI,EAAE,CAAC,aAAa,CAAC,GAAG,CAAC,CAAA;IACvD,2BAA2B;IAC3B,MAAM,EACJ,GAAG,EAAE,EAAE,YAAY,CAAC,CAAC,EAAE,IAAI,CAAC,WAAW,EAAE,EACzC,GAAG,EAAE,EAAE,CAAC,EAAE,IAAI,EAAE,CAAC,EAAE,IAAI,CAAC,WAAW,EAAE,GACtC,GAAG,WAAW,CAAA;IACf,mCAAmC;IACnC,MAAM,MAAM,GAAG,CAAC,IAAI,GAAG,IAAI,CAAC,GAAG,CAAC,CAAA;IAChC,mCAAmC;IACnC,kDAAkD;IAClD,mBAAmB;IACnB,GAAG,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAA;IACzB,GAAG,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,EAAE,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,EAAE,CAAC,CAAC,CAAA;IAChD,MAAM,CAAC,QAAQ,CAAC,GAAG,CAAC,IAAI,GAAG,IAAI,GAAG,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAA,CAAC,UAAU;IACrD,QAAQ,CAAC,MAAM,GAAG,IAAI,KAAK,CAAC,OAAO,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAA;AAC9C,CAAC,CAAA;AAED,MAAM,CAAC,MAAM,kBAAkB,GAAG,CAChC,GAAmB,EACnB,WAA0B,EAC1B,OAAsB,EACtB,EAAE;IACF,GAAG;QACD,GAAG,CAAC,QAAQ,CAAC,UAAU,KAAK;YAC1B,wDAAwD;YACxD,kDAAkD;YAClD,KAAK;YACL,IAAI,KAAK,YAAY,KAAK,CAAC,IAAI,EAAE;gBAC/B,KAAK,CAAC,QAAQ,GAAG,eAAe,CAAC,OAAO,EAAE,WAAW,CAAC,CAAA;gBACtD,8BAA8B;gBAC9B,WAAW,CAAC,IAAI,CAAC,KAAK,CAAC,CAAA;aACxB;iBAAM;gBACL,qCAAqC;aACtC;QACH,CAAC,CAAC,CAAA;AACN,CAAC,CAAA;AAED,MAAM,CAAC,MAAM,WAAW,GAAG,KAAK,EAC9B,KAAiC,EACjC,WAAyB,EACzB,EAAE;IACF,MAAM,EAAE,MAAM,EAAE,UAAU,EAAE,OAAO,EAAE,CAAC,EAAE,GAAG,WAAW,CAAA;IACtD,MAAM,CAAC,GAAG,EAAE,WAAW,EAAE,OAAO,CAAC,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC;QACpD,SAAS,CAAC,MAAM,CAAC;QACjB,cAAc,CAAC,UAAU,CAAC;QAC1B,WAAW,CAAC,CAAC,CAAC,EAAE,uBAAuB;KACxC,CAAC,CAAA;IACF,0CAA0C;IAC1C,kBAAkB,CAAC,GAAG,EAAE,WAAW,EAAE,OAAO,CAAC,CAAA;IAC7C,gCAAgC;IAChC,QAAQ,GAAG,IAAI,KAAK,CAAC,aAAa,CAAC,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC,CAAA;IACvD,QAAQ,CAAC,aAAa,CAAC,MAAM,CAAC,gBAAgB,CAAC,CAAA;IAC/C,QAAQ,CAAC,OAAO,CAAC,MAAM,EAAE,OAAO,CAAC,CAAA;IACjC,QAAQ,CAAC,SAAS,CAAC,OAAO,GAAG,IAAI,CAAA;IACjC,QAAQ,CAAC,WAAW,GAAG,KAAK,CAAC,qBAAqB,CAAA;IAClD,QAAQ,CAAC,mBAAmB,GAAG,CAAC,CAAA;IAChC,QAAQ,CAAC,cAAc,GAAG,KAAK,CAAC,YAAY,CAAA;IAC5C,wBAAwB;IACxB,KAAK,IAAI,KAAK,IAAI,KAAK,CAAC,WAAW,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAA;IACxD,eAAe;IACf,KAAK,GAAG,IAAI,KAAK,CAAC,KAAK,EAAE,CAAA;IACzB,gBAAgB;IAChB,MAAM,GAAG,IAAI,KAAK,CAAC,iBAAiB,CAAC,EAAE,EAAE,aAAa,EAAE,GAAG,EAAE,IAAI,CAAC,CAAA;IAClE,kCAAkC;IAClC,KAAK,CAAC,UAAU,GAAG,WAAW,CAAA;IAE9B,OAAO;IACP,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,UAAU,CAAC,CAAA;IAC7B,IAAI,CAAC,CAAC,KAAK,CAAC,UAAU,YAAY,KAAK,CAAC,WAAW,CAAC,EAAE;QACpD,MAAM,KAAK,GAAG,IAAI,KAAK,CAAC,eAAe,CAAC,QAAQ,EAAE,QAAQ,EAAE,CAAC,CAAC,CAAA;QAC9D,MAAM,MAAM,GAAG,IAAI,KAAK,CAAC,YAAY,CAAC,QAAQ,CAAC,CAAA;QAC/C,KAAK,CAAC,GAAG,CAAC,KAAK,CAAC,CAAA;QAChB,KAAK,CAAC,GAAG,CAAC,MAAM,CAAC,CAAA;KAClB;IACD,mBAAmB;IACnB,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,CAAA;IACd,iBAAiB;IACjB,QAAQ,GAAG,IAAI,aAAa,CAAC,MAAM,EAAE,QAAQ,CAAC,UAAU,CAAC,CAAA;IACzD,qCAAqC;IACrC,eAAe,CAAC,GAAG,EAAE,MAAM,EAAE,QAAQ,CAAC,CAAA;IACtC,UAAU;IACV,MAAM,gBAAgB,GAAG,GAAG,EAAE;QAC5B,qBAAqB,CAAC,gBAAgB,CAAC,CAAA;QACvC,IAAI,GAAG;YAAE,GAAG,CAAC,QAAQ,CAAC,CAAC,IAAI,KAAK,CAAA;QAChC,4EAA4E;QAC5E,QAAQ,CAAC,MAAM,EAAE,CAAA;QACjB,QAAQ,CAAC,MAAM,CAAC,KAAK,EAAE,MAAM,CAAC,CAAA;IAChC,CAAC,CAAA;IACD,gBAAgB,EAAE,CAAA;IAClB,MAAM,CAAC,gBAAgB,CAAC,QAAQ,EAAE,eAAe,CAAC,CAAA;IAElD,OAAO,EAAE,GAAG,EAAE,WAAW,EAAE,OAAO,EAAE,CAAA;AACtC,CAAC,CAAA","sourcesContent":["import * as THREE from 'three'\nimport { CanvasTexture } from 'three'\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js'\nimport { Viewer3dType } from '../types/types'\n// import { catalog } from \"../config/catalog\";\n// import { actions } from \"../store/store\";\n\nimport { loadBackground, loadModel, loadTexture } from './useLoader'\n\nconst _WIDTH = window.innerWidth // * 0.9\nconst _HEIGHT = window.innerHeight // * 0.9\nconst _ASPECT_RATIO = _WIDTH / _HEIGHT\n\nlet camera: THREE.PerspectiveCamera,\n  scene: THREE.Scene,\n  controls: OrbitControls,\n  sceneMeshes = [],\n  renderer: THREE.WebGLRenderer\n\nconst _createMaterial = (\n  texture: THREE.Texture,\n  hdrEquirect: THREE.Texture\n) => {\n  const meshParams = {\n    // color: 0xffffff,\n    transmission: 0,\n    opacity: 1,\n    metalness: 0.2,\n    roughness: 0,\n    ior: 1.5,\n    // thickness: 0.01,\n    specularIntensity: 1,\n    // specularColor: 0xffffff,\n    specularColor: new THREE.Color(0xffffff),\n    envMapIntensity: 1,\n    // lightIntensity: 1,\n  }\n  const r = Math.round(255 * Math.random())\n  const g = Math.round(255 * Math.random())\n  const b = Math.round(255 * Math.random())\n  const randomColor = `rgb(${r}, ${g}, ${b})`\n\n  return new THREE.MeshPhysicalMaterial({\n    // color: randomColor,\n    // ...(texture instanceof THREE.Texture\n    //   ? { color: randomColor, alphaMap: texture }\n    //   : { map: texture }),\n    ...(texture instanceof CanvasTexture && {\n      color: randomColor,\n      alphaMap: texture,\n    }),\n    ...(texture instanceof THREE.Texture && { map: texture }),\n    metalness: meshParams.metalness,\n    roughness: meshParams.roughness,\n    ior: meshParams.ior,\n    envMap: hdrEquirect,\n    envMapIntensity: meshParams.envMapIntensity,\n    transmission: meshParams.transmission, // use material.transmission for glass materials\n    specularIntensity: meshParams.specularIntensity,\n    specularColor: meshParams.specularColor,\n    opacity: meshParams.opacity,\n    side: THREE.DoubleSide,\n    transparent: true,\n  })\n}\n\nconst _onWindowResize = () => {\n  // console.log(\"_onWindowResize\", _WIDTH, _HEIGHT);\n  const width = window.innerWidth // * 0.9\n  const height = window.innerHeight // * 0.9\n\n  camera.aspect = width / height\n  camera.updateProjectionMatrix()\n\n  renderer.setSize(width, height)\n}\n\nconst _managePosition = (\n  obj: THREE.Object3D,\n  camera: THREE.Camera,\n  controls: OrbitControls\n) => {\n  // Creo un box che contiene l'obj cos√¨ da calcolarne i delta\n  const boundingBox = new THREE.Box3().setFromObject(obj)\n  // console.log(boundingBox)\n  const {\n    min: { /*x: minX,*/ y: minY /*z: minZ*/ },\n    max: { x: maxX, y: maxY /*z: maxZ*/ },\n  } = boundingBox\n  // const deltaX = (maxX - minX) / 2\n  const deltaY = (maxY - minY) / 2\n  // const deltaZ = (maxZ - minZ) / 2\n  // console.log(deltaX, deltaY, deltaZ, deltaY < 1)\n  // set obj position\n  obj.rotation.set(0, 0, 0)\n  obj.position.set(0, deltaY < 1 ? 0 : -deltaY, 0)\n  camera.position.set(maxX + maxX * 3, 0, 0) // x, y, z\n  controls.target = new THREE.Vector3(0, 0, 0)\n}\n\nexport const applyTextureOnMesh = (\n  obj: THREE.Object3D,\n  hdrEquirect: THREE.Texture,\n  texture: THREE.Texture\n) => {\n  obj &&\n    obj.traverse(function (child) {\n      // child.addEventListener('click', (a: THREE.Event) => {\n      //   applyTextureOnMesh(obj, hdrEquirect, texture)\n      // })\n      if (child instanceof THREE.Mesh) {\n        child.material = _createMaterial(texture, hdrEquirect)\n        // actions.addComponent(child)\n        sceneMeshes.push(child)\n      } else {\n        // console.log(\"Not managed\", child);\n      }\n    })\n}\n\nexport const use3DViewer = async (\n  mount: HTMLDivElement | undefined,\n  modelConfig: Viewer3dType\n) => {\n  const { object, background, texture: t } = modelConfig\n  const [obj, hdrEquirect, texture] = await Promise.all([\n    loadModel(object), // 3d model\n    loadBackground(background), // hdrEquirect\n    loadTexture(t), // texture for 3d model\n  ])\n  // apply random mesh color to object model\n  applyTextureOnMesh(obj, hdrEquirect, texture)\n  // create and configure renderer\n  renderer = new THREE.WebGLRenderer({ antialias: true })\n  renderer.setPixelRatio(window.devicePixelRatio)\n  renderer.setSize(_WIDTH, _HEIGHT)\n  renderer.shadowMap.enabled = true\n  renderer.toneMapping = THREE.ACESFilmicToneMapping\n  renderer.toneMappingExposure = 1\n  renderer.outputEncoding = THREE.sRGBEncoding\n  // mount renderer to dom\n  mount && mount && mount.appendChild(renderer.domElement)\n  // create scene\n  scene = new THREE.Scene()\n  // create camera\n  camera = new THREE.PerspectiveCamera(75, _ASPECT_RATIO, 0.1, 1000)\n  // set texture environment mapping\n  scene.background = hdrEquirect\n\n  // LUCE\n  console.log(scene.background)\n  if (!(scene.background instanceof THREE.DataTexture)) {\n    const light = new THREE.HemisphereLight(0xffffbb, 0x080820, 1)\n    const light2 = new THREE.AmbientLight(0x404040)\n    scene.add(light)\n    scene.add(light2)\n  }\n  // add obj to scene\n  scene.add(obj)\n  // orbit controls\n  controls = new OrbitControls(camera, renderer.domElement)\n  // settings camera and objec position\n  _managePosition(obj, camera, controls)\n  // ANIMATE\n  const renderAndAnimate = () => {\n    requestAnimationFrame(renderAndAnimate)\n    if (obj) obj.rotation.y -= 0.002\n    // required if controls.enableDamping or controls.autoRotate are set to true\n    controls.update()\n    renderer.render(scene, camera)\n  }\n  renderAndAnimate()\n  window.addEventListener('resize', _onWindowResize)\n\n  return { obj, hdrEquirect, texture }\n}\n"]}