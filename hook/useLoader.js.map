{"version":3,"file":"useLoader.js","sourceRoot":"","sources":["../src/hook/useLoader.ts"],"names":[],"mappings":"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","sourcesContent":["import * as THREE from 'three'\nimport { OBJLoader } from 'three/examples/jsm/loaders/OBJLoader.js'\nimport { RGBELoader } from 'three/examples/jsm/loaders/RGBELoader.js'\nimport { FBXLoader } from 'three/examples/jsm/loaders/FBXLoader.js'\nimport {\n  BackgroundConfig,\n  ObjectConfig,\n  TextureConfig,\n  _loadAsyncTextureType,\n  _loadFBXType,\n  _loadObjectType,\n  _loadObjType,\n  _loadRGBEType,\n} from '../types/types'\n\nconst manager = new THREE.LoadingManager()\nconst objLoader = new OBJLoader(manager)\nconst objectLoader = new THREE.ObjectLoader()\nconst fbxLoader = new FBXLoader()\nconst textureLoader = new THREE.TextureLoader(manager)\n\nmanager.onProgress = function (item, loaded, total) {\n  console.log(item, loaded, total)\n}\n\nconst loadRGBE: _loadRGBEType = (path, fileName) =>\n  new Promise((resolve, reject) => {\n    try {\n      const hdrEquirect = new RGBELoader().setPath(path).load(\n        fileName,\n        function () {\n          hdrEquirect.mapping = THREE.EquirectangularReflectionMapping\n          resolve(hdrEquirect)\n        },\n        xhr => {\n          if (xhr.lengthComputable) {\n            const percentComplete = (xhr.loaded / xhr.total) * 100\n            console.log('RGBE', Math.round(percentComplete) + '% downloaded')\n          }\n        }\n      )\n    } catch (error) {\n      reject(error)\n    }\n  })\n\nconst loadObj: _loadObjType = (path, fileName) =>\n  new Promise((resolve, reject) => {\n    objLoader.load(\n      `${path}${fileName}`,\n      function (obj) {\n        resolve(obj)\n      },\n      xhr => {\n        if (xhr.lengthComputable) {\n          const percentComplete = (xhr.loaded / xhr.total) * 100\n          console.log('Obj', Math.round(percentComplete) + '% downloaded')\n        }\n      },\n      err => {\n        reject(err)\n      }\n    )\n  })\n\nconst loadObjectJSON: _loadObjectType = (path, fileName) =>\n  new Promise((res, rej) => {\n    objectLoader.load(\n      `${path}${fileName}`,\n      function (obj) {\n        res(obj)\n      },\n      xhr => {\n        if (xhr.lengthComputable) {\n          const percentComplete = (xhr.loaded / xhr.total) * 100\n          console.log('Object', Math.round(percentComplete) + '% downloaded')\n        }\n      },\n      err => {\n        rej(err)\n      }\n    )\n  })\n\nconst loadAsyncTexture: _loadAsyncTextureType = (path, fileName) =>\n  new Promise((resolve, reject) => {\n    textureLoader.load(\n      `${path}${fileName}`,\n      texture => {\n        resolve(texture)\n      },\n      xhr => {\n        if (xhr.lengthComputable) {\n          const percentComplete = (xhr.loaded / xhr.total) * 100\n          console.log('Texture', Math.round(percentComplete) + '% downloaded')\n        }\n      },\n      err => {\n        reject(err)\n      }\n    )\n  })\n\nconst _generateTexture = () => {\n  const canvas = document.createElement('canvas')\n  canvas.width = 2\n  canvas.height = 2\n\n  const context = canvas.getContext('2d')\n  if (context) {\n    context.fillStyle = 'white'\n    context.fillRect(0, 1, 2, 1)\n  }\n  return canvas\n}\n\nconst generateTexture: () => THREE.CanvasTexture = () => {\n  const texture = new THREE.CanvasTexture(_generateTexture())\n  texture.magFilter = THREE.NearestFilter\n  texture.wrapT = THREE.RepeatWrapping\n  texture.wrapS = THREE.RepeatWrapping\n  texture.repeat.set(1, 0)\n  return texture\n}\n\nconst loadFBX: _loadFBXType = (path, fileName) =>\n  new Promise((resolve, reject) => {\n    fbxLoader.load(\n      `${path}${fileName}`,\n      function (fbx) {\n        resolve(fbx)\n      },\n      xhr => {\n        if (xhr.lengthComputable) {\n          const percentComplete = (xhr.loaded / xhr.total) * 100\n          console.log('FBX', Math.round(percentComplete) + '% downloaded')\n        }\n      },\n      err => {\n        reject(err)\n      }\n    )\n  })\n\nexport const loadModel = (object: ObjectConfig) => {\n  // check if the object is type of Object3D\n  if (object instanceof THREE.Object3D) return Promise.resolve(object)\n  if (!!object) {\n    const { type, path, fileName } = object\n    return type === 'obj' || !type\n      ? loadObj(path, fileName)\n      : object.type === 'json'\n      ? loadObjectJSON(path, fileName)\n      : loadFBX(path, fileName)\n  } else throw new Error('Object is not defined')\n}\n\n// background\nexport const loadBackground = (background?: BackgroundConfig) => {\n  if (background instanceof THREE.DataTexture)\n    return Promise.resolve(background)\n  return background\n    ? loadRGBE(background.path, background.fileName)\n    : Promise.resolve(generateTexture())\n}\n\n// texture\nexport const loadTexture = (texture?: TextureConfig) => {\n  if (texture instanceof THREE.Texture) return Promise.resolve(texture)\n  return texture\n    ? loadAsyncTexture(texture.path, texture.fileName)\n    : Promise.resolve(generateTexture())\n}\n"]}